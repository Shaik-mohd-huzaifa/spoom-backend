// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  // Use connection string from environment variables
  url      = env("DATABASE_URL")
}

// User Management Models
model User {
  id                String    @id @default(uuid())
  email             String    @unique
  name              String
  avatarUrl         String?   @map("avatar_url")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @map("updated_at")
  lastLogin         DateTime? @map("last_login")
  isActive          Boolean   @default(true) @map("is_active")
  isVerified        Boolean   @default(false) @map("is_verified")
  roleId            String?   @map("role_id")
  
  // Relations
  role              Role?     @relation(fields: [roleId], references: [id])
  userSettings      UserSettings?
  ownedWorkspaces   Workspace[]
  workspaceMemberships WorkspaceMember[]
  messages          Message[]
  directMessagesSent DirectMessage[] @relation("SenderMessages")
  directMessagesReceived DirectMessage[] @relation("ReceiverMessages")
  credits           Credit[]
  aiResponses       AIGeneratedResponse[]
  
  @@map("users")
}

model Role {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  permissions Json      @default("{}") 
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  
  // Relations
  users       User[]
  
  @@map("roles")
}

model UserSettings {
  id                  String    @id @default(uuid())
  userId              String    @unique @map("user_id")
  theme               String    @default("light")
  language            String    @default("en")
  notificationsEnabled Boolean   @default(true) @map("notifications_enabled")
  emailNotifications  Boolean   @default(true) @map("email_notifications")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @default(now()) @map("updated_at")
  
  // Relations
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_settings")
}

// Workspace Models
model Workspace {
  id                String    @id @default(uuid())
  name              String
  slug              String    @unique
  description       String?
  logoUrl           String?   @map("logo_url")
  ownerId           String    @map("owner_id")
  isPersonal        Boolean   @default(false) @map("is_personal")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @map("updated_at")
  
  // Relations
  owner             User      @relation(fields: [ownerId], references: [id])
  members           WorkspaceMember[]
  channels          Channel[]
  workspaceSettings WorkspaceSettings?
  
  @@map("workspaces")
}

model WorkspaceSettings {
  id                String    @id @default(uuid())
  workspaceId       String    @unique @map("workspace_id")
  notificationsEnabled Boolean @default(true) @map("notifications_enabled")
  defaultUserRole   String    @default("member") @map("default_user_role")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @map("updated_at")
  
  // Relations
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("workspace_settings")
}

model WorkspaceMember {
  id                String    @id @default(uuid())
  workspaceId       String    @map("workspace_id")
  userId            String    @map("user_id")
  role              String    @default("member")
  joinedAt          DateTime  @default(now()) @map("joined_at")
  
  // Relations
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

// Communication Models
model Channel {
  id                String    @id @default(uuid())
  workspaceId       String    @map("workspace_id")
  name              String
  description       String?
  isPrivate         Boolean   @default(false) @map("is_private")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @map("updated_at")
  
  // Relations
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages          Message[]
  
  @@unique([workspaceId, name])
  @@map("channels")
}

model Message {
  id                String    @id @default(uuid())
  channelId         String    @map("channel_id")
  userId            String?   @map("user_id")
  content           String
  isEdited          Boolean   @default(false) @map("is_edited")
  parentId          String?   @map("parent_id")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @map("updated_at")
  
  // Relations
  channel           Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user              User?     @relation(fields: [userId], references: [id])
  parent            Message?  @relation("MessageReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies           Message[] @relation("MessageReplies")
  aiResponses       AIGeneratedResponse[]
  
  @@map("messages")
}

model DirectMessage {
  id                String    @id @default(uuid())
  senderId          String?   @map("sender_id")
  receiverId        String?   @map("receiver_id")
  content           String
  isRead            Boolean   @default(false) @map("is_read")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @map("updated_at")
  
  // Relations
  sender            User?     @relation("SenderMessages", fields: [senderId], references: [id])
  receiver          User?     @relation("ReceiverMessages", fields: [receiverId], references: [id])
  
  @@map("direct_messages")
}

// Billing and AI Models
model Credit {
  id                String    @id @default(uuid())
  userId            String    @map("user_id")
  amount            Float
  balance           Float     @default(0)
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @map("updated_at")
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("credits")
}

model AIGeneratedResponse {
  id                String    @id @default(uuid())
  userId            String?   @map("user_id")
  messageId         String?   @map("message_id")
  prompt            String
  response          String
  model             String?
  tokensUsed        Int?      @map("tokens_used")
  createdAt         DateTime  @default(now()) @map("created_at")
  
  // Relations
  user              User?     @relation(fields: [userId], references: [id])
  message           Message?  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  @@map("ai_generated_responses")
}

model Role {
  id          UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String    @unique
  description String?
  permissions Json      @default("{}")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  users       User[]
  
  @@map("roles")
}

model UserSettings {
  id                  UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId              UUID      @unique @map("user_id") @db.Uuid
  theme               String    @default("light")
  language            String    @default("en")
  notificationsEnabled Boolean   @default(true) @map("notifications_enabled")
  emailNotifications  Boolean   @default(true) @map("email_notifications")
  pushNotifications   Boolean   @default(true) @map("push_notifications")
  desktopNotifications Boolean   @default(true) @map("desktop_notifications")
  appearance          Json      @default("{\"colorMode\": \"light\", \"fontSize\": \"medium\", \"density\": \"comfortable\"}") @db.Json
  privacySettings     Json      @default("{\"shareStatus\": false, \"showOnlineStatus\": true, \"allowDataCollection\": true}") @map("privacy_settings") @db.Json
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt           DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_settings")
}

// Organization Models
model Organization {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String
  slug              String    @unique
  description       String?
  logoUrl           String?   @map("logo_url")
  ownerId           UUID      @map("owner_id") @db.Uuid
  isPersonal        Boolean   @default(false) @map("is_personal")
  domainRestriction String[]  @map("domain_restriction")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  owner             User      @relation("OrganizationOwner", fields: [ownerId], references: [id])
  members           OrganizationMember[]
  workspaces        Workspace[]
  
  @@map("organizations")
}

model OrganizationMember {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organizationId    UUID      @map("organization_id") @db.Uuid
  userId            UUID      @map("user_id") @db.Uuid
  role              String    @default("member")
  joinedAt          DateTime  @default(now()) @map("joined_at") @db.Timestamptz()
  invitationStatus  String    @default("accepted") @map("invitation_status")
  
  // Relations
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, userId])
  @@map("organization_members")
}

// Workspace Models
model Workspace {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String
  slug              String    @unique
  description       String?
  logoUrl           String?   @map("logo_url")
  ownerId           UUID      @map("owner_id") @db.Uuid
  organizationId    UUID?     @map("organization_id") @db.Uuid
  isPersonal        Boolean   @default(false) @map("is_personal")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  owner             User      @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  organization      Organization? @relation(fields: [organizationId], references: [id])
  members           WorkspaceMember[]
  channels          Channel[]
  workspaceSettings WorkspaceSettings?
  workspaceApps     WorkspaceApp[]
  
  @@map("workspaces")
}

model WorkspaceSettings {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  workspaceId       UUID      @unique @map("workspace_id") @db.Uuid
  notificationsEnabled Boolean @default(true) @map("notifications_enabled")
  defaultUserRole   String    @default("member") @map("default_user_role")
  privacyLevel      String    @default("private") @map("privacy_level")
  allowGuestAccess  Boolean   @default(false) @map("allow_guest_access")
  domainRestriction String[]  @map("domain_restriction")
  securitySettings  Json      @default("{\"enforceSSO\": false, \"requireMFA\": false, \"sessionTimeout\": 3600}") @map("security_settings") @db.Json
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("workspace_settings")
}

model WorkspaceMember {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  workspaceId       UUID      @map("workspace_id") @db.Uuid
  userId            UUID      @map("user_id") @db.Uuid
  role              String    @default("member")
  joinedAt          DateTime  @default(now()) @map("joined_at") @db.Timestamptz()
  invitationStatus  String    @default("accepted") @map("invitation_status")
  
  // Relations
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

// Communication Models
model Channel {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  workspaceId       UUID      @map("workspace_id") @db.Uuid
  name              String
  description       String?
  isPrivate         Boolean   @default(false) @map("is_private")
  createdById       UUID?     @map("created_by") @db.Uuid
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  members           ChannelMember[]
  messages          Message[]
  
  @@unique([workspaceId, name])
  @@map("channels")
}

model ChannelMember {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  channelId         UUID      @map("channel_id") @db.Uuid
  userId            UUID      @map("user_id") @db.Uuid
  joinedAt          DateTime  @default(now()) @map("joined_at") @db.Timestamptz()
  
  // Relations
  channel           Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([channelId, userId])
  @@map("channel_members")
}

model Message {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  channelId         UUID      @map("channel_id") @db.Uuid
  userId            UUID?     @map("user_id") @db.Uuid
  content           String
  isEdited          Boolean   @default(false) @map("is_edited")
  parentId          UUID?     @map("parent_id") @db.Uuid
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  channel           Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user              User?     @relation(fields: [userId], references: [id])
  parent            Message?  @relation("MessageReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies           Message[] @relation("MessageReplies")
  reactions         MessageReaction[]
  aiResponses       AIGeneratedResponse[]
  
  @@map("messages")
}

model MessageReaction {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  messageId         UUID      @map("message_id") @db.Uuid
  userId            UUID      @map("user_id") @db.Uuid
  reaction          String
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  
  // Relations
  message           Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, userId, reaction])
  @@map("message_reactions")
}

model DirectMessage {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  senderId          UUID?     @map("sender_id") @db.Uuid
  receiverId        UUID?     @map("receiver_id") @db.Uuid
  content           String
  isRead            Boolean   @default(false) @map("is_read")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  sender            User?     @relation("SenderMessages", fields: [senderId], references: [id])
  receiver          User?     @relation("ReceiverMessages", fields: [receiverId], references: [id])
  
  @@map("direct_messages")
}

// Group Models
model Group {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  workspaceId       UUID      @map("workspace_id") @db.Uuid
  name              String
  description       String?
  createdById       UUID?     @map("created_by") @db.Uuid
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  members           GroupMember[]
  
  @@unique([workspaceId, name])
  @@map("groups")
}

model GroupMember {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  groupId           UUID      @map("group_id") @db.Uuid
  userId            UUID      @map("user_id") @db.Uuid
  role              String    @default("member")
  joinedAt          DateTime  @default(now()) @map("joined_at") @db.Timestamptz()
  
  // Relations
  group             Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([groupId, userId])
  @@map("group_members")
}

// Integration Models
model App {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String
  description       String?
  logoUrl           String?   @map("logo_url")
  isActive          Boolean   @default(true) @map("is_active")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  userApps          UserApp[]
  workspaceApps     WorkspaceApp[]
  
  @@map("apps")
}

model UserApp {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            UUID      @map("user_id") @db.Uuid
  appId             UUID      @map("app_id") @db.Uuid
  config            Json?     @db.Json
  connectionData    Json?     @default("{}") @map("connection_data") @db.Json
  isActive          Boolean   @default(true) @map("is_active")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  app               App       @relation(fields: [appId], references: [id], onDelete: Cascade)
  
  @@unique([userId, appId])
  @@map("user_apps")
}

model WorkspaceApp {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  workspaceId       UUID      @map("workspace_id") @db.Uuid
  appId             UUID      @map("app_id") @db.Uuid
  installedById     UUID?     @map("installed_by") @db.Uuid
  config            Json?     @db.Json
  connectionData    Json?     @default("{}") @map("connection_data") @db.Json
  isActive          Boolean   @default(true) @map("is_active")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  app               App       @relation(fields: [appId], references: [id], onDelete: Cascade)
  
  @@unique([workspaceId, appId])
  @@map("workspace_apps")
}

// Billing and Payment Models
model Credit {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            UUID      @map("user_id") @db.Uuid
  amount            Decimal   @db.Decimal(12, 2)
  balance           Decimal   @default(0) @db.Decimal(12, 2)
  lastToppedUp      DateTime? @map("last_topped_up") @db.Timestamptz()
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("credits")
}

model Payment {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            UUID      @map("user_id") @db.Uuid
  amount            Decimal   @db.Decimal(12, 2)
  currency          String    @default("USD") @db.VarChar(3)
  paymentMethod     String    @map("payment_method") @db.VarChar(50)
  status            String
  transactionId     String?   @map("transaction_id")
  metadata          Json?     @default("{}") @db.Json
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model SubscriptionPlan {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String
  description       String?
  price             Decimal   @db.Decimal(12, 2)
  interval          String
  features          Json?     @default("{}") @db.Json
  isActive          Boolean   @default(true) @map("is_active")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  subscriptions     UserSubscription[]
  
  @@map("subscription_plans")
}

model UserSubscription {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            UUID      @map("user_id") @db.Uuid
  planId            UUID      @map("plan_id") @db.Uuid
  startDate         DateTime  @map("start_date") @db.Timestamptz()
  endDate           DateTime? @map("end_date") @db.Timestamptz()
  status            String
  renewalDate       DateTime? @map("renewal_date") @db.Timestamptz()
  canceledAt        DateTime? @map("canceled_at") @db.Timestamptz()
  paymentMethodId   String?   @map("payment_method_id")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan              SubscriptionPlan @relation(fields: [planId], references: [id])
  
  @@map("user_subscriptions")
}

// AI Functionality Models
model AIGeneratedResponse {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            UUID?     @map("user_id") @db.Uuid
  messageId         UUID?     @map("message_id") @db.Uuid
  prompt            String
  response          String
  model             String?
  tokensUsed        Int?      @map("tokens_used")
  feedback          String?
  rating            Int?
  cost              Decimal?  @db.Decimal(10, 6)
  metadata          Json?     @default("{}") @db.Json
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime? @map("updated_at") @db.Timestamptz()
  
  // Relations
  user              User?     @relation(fields: [userId], references: [id])
  message           Message?  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  @@map("ai_generated_responses")
}

// Notification Models
model Notification {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            UUID      @map("user_id") @db.Uuid
  title             String
  content           String?
  notificationType  String    @map("notification_type")
  isRead            Boolean   @default(false) @map("is_read")
  link              String?
  metadata          Json?     @default("{}") @db.Json
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

// File Storage Models
model File {
  id                UUID      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            UUID      @map("user_id") @db.Uuid
  name              String
  path              String
  size              Int
  type              String
  messageId         UUID?     @map("message_id") @db.Uuid
  isPublic          Boolean   @default(false) @map("is_public")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  
  // Relations
  user              User      @relation(fields: [userId], references: [id])
  
  @@map("files")
}
